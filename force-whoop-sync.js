// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Whoop —á–µ—Ä–µ–∑ Terra API
async function forceWhoopSync() {
  const TERRA_API_KEY = 'MzD8ZUjfmcHdTj6C5w1TZ0wS0TGsN4bY'; // Terra API Key
  const TERRA_DEV_ID = 'elite10-prod-c5pEdCVIav';
  
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Whoop...');
    
    // –ü–æ–ª—É—á–∞–µ–º terra_user_id –¥–ª—è Whoop
    const supabaseUrl = 'https://ueykmmzmguzjppdudvef.supabase.co';
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVleWttbXptZ3V6anBwZHVkdmVmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg0NTAwNjEsImV4cCI6MjA3NDAyNjA2MX0.nSc_MFoU6rAsyw0c8Mv-BD0MPuGAsuDXUckvMUyYX94';
    
    const tokenResponse = await fetch(`${supabaseUrl}/rest/v1/terra_tokens?provider=eq.WHOOP&select=terra_user_id,user_id`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`
      }
    });
    
    const tokens = await tokenResponse.json();
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ Whoop —Ç–æ–∫–µ–Ω–æ–≤:', tokens.length);
    
    if (tokens.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö Whoop –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
      return;
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const token of tokens) {
      console.log(`\nüë§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${token.user_id}`);
      console.log(`   Terra User ID: ${token.terra_user_id}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
      const dataTypes = ['activity', 'body', 'daily', 'sleep', 'nutrition'];
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - 7);
      
      for (const dataType of dataTypes) {
        try {
          const url = `https://api.tryterra.co/v2/${dataType}?user_id=${token.terra_user_id}&start_date=${startDate.toISOString().split('T')[0]}&end_date=${endDate.toISOString().split('T')[0]}`;
          
          console.log(`   üì• –ó–∞–ø—Ä–æ—Å ${dataType}...`);
          const response = await fetch(url, {
            headers: {
              'dev-id': TERRA_DEV_ID,
              'x-api-key': TERRA_API_KEY
            }
          });
          
          const data = await response.json();
          console.log(`   ‚úÖ ${dataType}: ${JSON.stringify(data).substring(0, 200)}...`);
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 1000));
        } catch (error) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ${dataType}:`, error.message);
        }
      }
    }
    
    console.log('\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
forceWhoopSync();
