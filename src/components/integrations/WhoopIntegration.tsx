import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import { useQueryClient } from '@tanstack/react-query';
import { 
  Loader2, 
  CheckCircle, 
  RefreshCw,
  Unlink,
  Zap,
  Activity,
  Moon,
  Heart,
  AlertCircle
} from 'lucide-react';

interface WhoopConnection {
  connected: boolean;
  connectedAt?: string;
  lastSync?: string;
  whoopUserId?: string;
  isActive?: boolean;
}

export function WhoopIntegration() {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [connection, setConnection] = useState<WhoopConnection>({ connected: false });
  const [loading, setLoading] = useState(true);
  const [syncing, setSyncing] = useState(false);
  const [connecting, setConnecting] = useState(false);

  useEffect(() => {
    if (user) {
      checkConnection();
    }
  }, [user]);

  // Realtime subscription for token updates
  useEffect(() => {
    if (!user) return;
    
    const channel = supabase
      .channel(`whoop_tokens:${user.id}`)
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'whoop_tokens',
          filter: `user_id=eq.${user.id}`
        },
        (payload) => {
          console.log('üîÑ Whoop token updated via realtime:', payload);
          checkConnection();
        }
      )
      .subscribe();
    
    return () => {
      supabase.removeChannel(channel);
    };
  }, [user]);

  const checkConnection = async () => {
    if (!user) return;
    
    try {
      const { data: token } = await supabase
        .from('whoop_tokens')
        .select('*')
        .eq('user_id', user.id)
        .eq('is_active', true)
        .maybeSingle();

      if (token) {
        setConnection({
          connected: true,
          connectedAt: token.created_at,
          lastSync: token.last_sync_date || token.updated_at,
          whoopUserId: token.whoop_user_id,
          isActive: token.is_active,
        });
      } else {
        setConnection({ connected: false });
      }
    } catch (error: any) {
      console.error('Connection check error:', error);
    } finally {
      setLoading(false);
    }
  };

  const clearAllCaches = () => {
    // –û—á–∏—Å—Ç–∫–∞ localStorage
    const keysToRemove = [
      'fitness_metrics_cache',
      'fitness_data_cache_whoop',
      'fitness_data_cache',
      'metrics_view_mode',
      'metrics_device_filter'
    ];
    
    keysToRemove.forEach(key => {
      localStorage.removeItem(key);
    });
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Whoop –∏ fitness
    Object.keys(localStorage).forEach(key => {
      if (key.includes('whoop') || key.includes('fitness') || key.startsWith('progress_cache_')) {
        localStorage.removeItem(key);
      }
    });
    
    // –û—á–∏—Å—Ç–∫–∞ sessionStorage
    Object.keys(sessionStorage).forEach(key => {
      if (key.includes('whoop_code')) {
        sessionStorage.removeItem(key);
      }
    });
    
    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è React Query –∫–µ—à–∞
    queryClient.invalidateQueries({ queryKey: ['metric_values'] });
    queryClient.invalidateQueries({ queryKey: ['user_metrics'] });
    queryClient.invalidateQueries({ queryKey: ['workouts'] });
    queryClient.invalidateQueries({ queryKey: ['cycles'] });
    queryClient.invalidateQueries({ queryKey: ['sleep'] });
    queryClient.invalidateQueries({ queryKey: ['unified-metrics'] });
    queryClient.invalidateQueries({ queryKey: ['widgets'] });
    queryClient.invalidateQueries({ queryKey: ['dashboard-metrics'] });
    
    console.log('‚úÖ All Whoop caches cleared');
  };

  const connectWhoop = async () => {
    if (!user) return;

    setConnecting(true);
    try {
      const { data, error } = await supabase.functions.invoke('whoop-integration', {
        body: { action: 'get-auth-url' },
      });

      if (error) throw error;
      if (!data?.authUrl) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Whoop
      window.location.href = data.authUrl;
    } catch (error: any) {
      console.error('Connect error:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Whoop',
        variant: 'destructive',
      });
      setConnecting(false);
    }
  };

  const syncData = async () => {
    if (!user) return;

    setSyncing(true);
    try {
      const { data, error } = await supabase.functions.invoke('whoop-integration', {
        body: { action: 'sync-data' },
      });

      if (error) {
        const errorMsg = (error as any)?.message || error;
        const statusCode = (error as any)?.status;
        
        // –ï—Å–ª–∏ 401 –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (statusCode === 401 || 
            errorMsg?.includes('reconnect') || 
            errorMsg?.includes('credentials have changed') ||
            errorMsg?.includes('No active Whoop connection')) {
          
          // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
          await checkConnection();
          
          toast({
            title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
            description: '–¢–æ–∫–µ–Ω Whoop –∏—Å—Ç—ë–∫ –∏–ª–∏ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.',
            variant: 'destructive',
          });
          return;
        }
        
        throw new Error(errorMsg || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      }

      // –£—Å–ø–µ—à–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await checkConnection();
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ React Query –∫—ç—à–∏
      queryClient.invalidateQueries({ queryKey: ['unified-metrics'] });
      queryClient.invalidateQueries({ queryKey: ['widgets'] });
      queryClient.invalidateQueries({ queryKey: ['dashboard-metrics'] });
      queryClient.invalidateQueries();
      
      // –û—á–∏—â–∞–µ–º localStorage –∫–µ—à–∏
      localStorage.removeItem('fitness_metrics_cache');
      localStorage.removeItem('fitness_data_cache_whoop');
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('progress_cache_')) {
          localStorage.removeItem(key);
        }
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      window.dispatchEvent(new CustomEvent('whoop-data-updated'));
      
      toast({
        title: '–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã',
        description: 'Whoop –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      });
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
      setTimeout(() => {
        window.location.reload();
      }, 1000);
      
    } catch (error: any) {
      console.error('Sync error:', error);
      
      // Check if reconnect is needed
      const needsReconnect = error.message?.includes('reconnect') || 
                            error.message?.includes('credentials have changed') ||
                            error.status === 401;
      
      if (needsReconnect) {
        // Update connection status
        await checkConnection();
        
        toast({
          title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
          description: 'Whoop credentials –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –ù–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å Whoop" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.',
          variant: 'destructive',
          duration: 10000,
        });
      } else {
        toast({
          title: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
          description: error.message,
          variant: 'destructive',
        });
      }
      
      // Always recheck connection on any error
      await checkConnection();
    } finally {
      setSyncing(false);
    }
  };

  const disconnect = async () => {
    if (!user) return;

    try {
      setLoading(true);
      
      // 1. –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
      const { error: dbError } = await supabase
        .from('whoop_tokens')
        .update({ is_active: false })
        .eq('user_id', user.id);
      
      if (dbError) throw dbError;
      
      // 2. –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ—à–∏
      clearAllCaches();
      
      // 3. –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setConnection({ connected: false });
      
      toast({
        title: 'Whoop –æ—Ç–∫–ª—é—á—ë–Ω',
        description: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ.',
      });
    } catch (error: any) {
      console.error('Disconnect error:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è',
        description: error.message,
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="flex items-center justify-center py-8">
          <Loader2 className="h-6 w-6 animate-spin" />
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Inactive token warning */}
      {connection.connected && !connection.isActive && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</AlertTitle>
          <AlertDescription className="space-y-3">
            <p>
              Whoop credentials –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
            </p>
            <Button 
              onClick={connectWhoop}
              disabled={connecting}
              size="sm"
              className="w-full sm:w-auto"
            >
              {connecting ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...
                </>
              ) : (
                '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å Whoop'
              )}
            </Button>
          </AlertDescription>
        </Alert>
      )}

      {/* Connected Status */}
      {connection.connected && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {connection.isActive ? (
                <CheckCircle className="h-5 w-5 text-success" />
              ) : (
                <AlertCircle className="h-5 w-5 text-destructive" />
              )}
              Whoop {connection.isActive ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '—Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <Button onClick={syncData} disabled={syncing || loading} className="w-full">
                {syncing ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...
                  </>
                ) : (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2" />
                    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å
                  </>
                )}
              </Button>
              <Button
                variant="outline"
                onClick={() => {
                  clearAllCaches();
                  toast({
                    title: '–ö–µ—à –æ—á–∏—â–µ–Ω',
                    description: '–í—Å–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Whoop —É–¥–∞–ª–µ–Ω—ã',
                  });
                }}
                disabled={loading}
                className="w-full"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
              </Button>
            </div>

            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertDescription>
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é.
              </AlertDescription>
            </Alert>

            <div className="p-3 border rounded-lg flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Zap className="h-5 w-5" />
                <div>
                  <p className="font-medium">Whoop</p>
                  <p className="text-xs text-muted-foreground">
                    –ü–æ–¥–∫–ª—é—á–µ–Ω {new Date(connection.connectedAt!).toLocaleDateString('ru-RU')}
                  </p>
                  {connection.lastSync && (
                    <p className="text-xs text-muted-foreground">
                      –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {new Date(connection.lastSync).toLocaleString('ru-RU', {
                        day: 'numeric',
                        month: 'short',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </p>
                  )}
                </div>
              </div>
              <Button variant="ghost" size="sm" onClick={disconnect}>
                <Unlink className="h-4 w-4" />
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Connect Whoop */}
      {!connection.connected && (
        <Card>
          <CardHeader>
            <CardTitle>–ü–æ–¥–∫–ª—é—á–∏—Ç—å Whoop</CardTitle>
            <CardDescription>
              –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–≥–æ Whoop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button 
              className="w-full h-auto p-4 justify-start"
              onClick={connectWhoop}
              disabled={connecting}
            >
              {connecting ? (
                <>
                  <Loader2 className="h-5 w-5 mr-3 animate-spin" />
                  <span className="flex-1 text-left">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span>
                </>
              ) : (
                <>
                  <Zap className="h-5 w-5 mr-3" />
                  <span className="flex-1 text-left">–ü–æ–¥–∫–ª—é—á–∏—Ç—å Whoop</span>
                </>
              )}
            </Button>

            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertDescription>
                <strong>–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç Whoop:</strong>
                <ul className="list-disc pl-5 mt-2 space-y-1">
                  <li><strong>Recovery Score</strong> (% –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è) - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞</li>
                  <li><strong>Day Strain</strong> - –æ–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –∑–∞ –¥–µ–Ω—å</li>
                  <li><strong>Workout Strain</strong> - –Ω–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</li>
                  <li><strong>Sleep Performance</strong> (%) - –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞</li>
                  <li><strong>Sleep Efficiency</strong> (%) - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∞</li>
                  <li><strong>Sleep Duration</strong> (—á–∞—Å—ã) - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞</li>
                  <li><strong>Calories</strong> - –∫–∞–ª–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</li>
                  <li><strong>Heart Rate</strong> - –ø—É–ª—å—Å –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</li>
                </ul>
              </AlertDescription>
            </Alert>
          </CardContent>
        </Card>
      )}

{/* Terra widget is now shown on the page itself */}
    </div>
  );
}
