import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Loader2, Activity, Calendar, CheckCircle2, XCircle, Zap, Heart, Watch, Smartphone, AlertCircle, ExternalLink } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import { Alert, AlertDescription } from "@/components/ui/alert";

interface TerraProvider {
  provider: string;
  connectedAt: string;
  lastSync?: string;
  terraUserId: string;
}

interface TerraStatus {
  connected: boolean;
  providers: TerraProvider[];
}

const providerIcons: Record<string, any> = {
  ULTRAHUMAN: Zap,
  WHOOP: Activity,
  GARMIN: Watch,
  FITBIT: Heart,
  OURA: Activity,
  APPLE_HEALTH: Smartphone,
  WITHINGS: Heart,
};

const providerNames: Record<string, string> = {
  ULTRAHUMAN: 'UltraHuman Ring',
  WHOOP: 'Whoop Band',
  GARMIN: 'Garmin',
  FITBIT: 'Fitbit',
  OURA: 'Oura Ring',
  APPLE_HEALTH: 'Apple Health',
  WITHINGS: 'Withings',
};

export function TerraIntegration() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [status, setStatus] = useState<TerraStatus>({ connected: false, providers: [] });
  const [loading, setLoading] = useState(true);
  const [syncing, setSyncing] = useState(false);
  const [disconnecting, setDisconnecting] = useState<string | null>(null);
  const [testingWebhook, setTestingWebhook] = useState(false);
  const [diagnostics, setDiagnostics] = useState<any>(null);
  const [showDiagnostics, setShowDiagnostics] = useState(false);

  useEffect(() => {
    if (user) {
      checkConnectionStatus();
    }
  }, [user]);

  const checkConnectionStatus = async () => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) return;

      const { data, error } = await supabase.functions.invoke('terra-integration', {
        method: 'POST',
        body: { action: 'check-status' },
        headers: {
          Authorization: `Bearer ${session.access_token}`,
        },
      });

      if (error) throw error;

      setStatus(data);
    } catch (error: any) {
      console.error('Error checking Terra status:', error);
    } finally {
      setLoading(false);
    }
  };

  const connectTerra = async () => {
    try {
      setLoading(true);
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) throw new Error('Not authenticated');

      const { data, error } = await supabase.functions.invoke('terra-integration', {
        method: 'POST',
        body: { 
          action: 'get-auth-url',
          baseUrl: window.location.origin
        },
        headers: {
          Authorization: `Bearer ${session.access_token}`,
        },
      });

      if (error) throw error;

      // –û—Ç–∫—Ä—ã—Ç—å Terra Widget –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
      const width = 500;
      const height = 700;
      const left = window.screen.width / 2 - width / 2;
      const top = window.screen.height / 2 - height / 2;

      const popup = window.open(
        data.url,
        'Terra Connect',
        `width=${width},height=${height},left=${left},top=${top}`
      );

      // –°–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      const handleMessage = (event: MessageEvent) => {
        if (event.data === 'terra-success') {
          popup?.close();
          checkConnectionStatus();
          toast({
            title: "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ",
            description: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ Terra API",
          });
          window.removeEventListener('message', handleMessage);
        }
      };

      window.addEventListener('message', handleMessage);

    } catch (error: any) {
      console.error('Error connecting Terra:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const disconnectProvider = async (provider: string) => {
    try {
      setDisconnecting(provider);
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) throw new Error('Not authenticated');

      const { error } = await supabase.functions.invoke('terra-integration', {
        method: 'POST',
        body: {
          action: 'disconnect',
          provider
        },
        headers: {
          Authorization: `Bearer ${session.access_token}`,
        },
      });

      if (error) throw error;

      await checkConnectionStatus();
      toast({
        title: "–û—Ç–∫–ª—é—á–µ–Ω–æ",
        description: `${providerNames[provider]} –æ—Ç–∫–ª—é—á–µ–Ω`,
      });

    } catch (error: any) {
      console.error('Error disconnecting provider:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setDisconnecting(null);
    }
  };

  const syncData = async () => {
    try {
      setSyncing(true);
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) throw new Error('Not authenticated');

      const { error } = await supabase.functions.invoke('terra-integration', {
        method: 'POST',
        body: { action: 'sync-data' },
        headers: {
          Authorization: `Bearer ${session.access_token}`,
        },
      });

      if (error) throw error;

      toast({
        title: "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
        description: "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
      });

      // –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à–∏
      window.dispatchEvent(new Event('fitness-data-updated'));

    } catch (error: any) {
      console.error('Error syncing Terra data:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setSyncing(false);
    }
  };

  const testWebhook = async () => {
    try {
      setTestingWebhook(true);
      setShowDiagnostics(true);
      
      const webhookUrl = 'https://ueykmmzmguzjppdudvef.functions.supabase.co/webhook-terra';
      
      toast({
        title: "üß™ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
        description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...",
      });

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –ë–î
      const { data: tokens, error: tokensError } = await supabase
        .from('terra_tokens')
        .select('*')
        .eq('user_id', user?.id);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
      const { data: payloads, error: payloadsError } = await supabase
        .from('terra_data_payloads')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(5);

      // 3. –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ webhook –Ω–∞–ø—Ä—è–º—É—é
      let webhookReachable = false;
      try {
        const response = await fetch(webhookUrl);
        webhookReachable = response.status === 400; // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 400 (missing signature)
      } catch (e) {
        webhookReachable = false;
      }

      const result = {
        timestamp: new Date().toISOString(),
        checks: {
          webhookUrl: {
            url: webhookUrl,
            status: webhookReachable ? 'ok' : 'fail',
            message: webhookReachable 
              ? 'Webhook –¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å Terra)' 
              : 'Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ø–ª–æ–π',
          },
          terraTokens: {
            status: tokens && tokens.length > 0 ? 'ok' : 'fail',
            count: tokens?.length || 0,
            message: tokens && tokens.length > 0
              ? `–ù–∞–π–¥–µ–Ω–æ ${tokens.length} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π`
              : '–ù–µ—Ç auth —Å–æ–±—ã—Ç–∏–π –æ—Ç Terra - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Webhooks',
          },
          dataEvents: {
            status: payloads && payloads.length > 0 ? 'ok' : 'warning',
            count: payloads?.length || 0,
            message: payloads && payloads.length > 0
              ? `–ü–æ–ª—É—á–µ–Ω–æ ${payloads.length} —Å–æ–±—ã—Ç–∏–π`
              : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏)',
          },
          configuration: {
            status: 'info',
            steps: [
              { 
                text: '–í Terra Dashboard ‚Üí Webhooks –≤–∫–ª—é—á—ë–Ω event "auth"',
                link: 'https://dashboard.tryterra.co/webhooks'
              },
              {
                text: 'Webhook URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π',
                value: webhookUrl
              },
              {
                text: 'Signing Secret —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—É Terra',
                link: 'https://supabase.com/dashboard/project/ueykmmzmguzjppdudvef/settings/functions'
              }
            ]
          }
        },
        userId: user?.id,
      };

      setDiagnostics(result);
      console.log('üß™ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Terra:', result);

      const hasIssues = result.checks.terraTokens.status === 'fail' || !webhookReachable;
      
      toast({
        title: hasIssues ? "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã" : "‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        description: hasIssues 
          ? "–°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∏–∂–µ"
          : "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
        variant: hasIssues ? "destructive" : "default",
      });

    } catch (error: any) {
      console.error('Error testing webhook:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setTestingWebhook(false);
    }
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="pt-6 flex justify-center">
          <Loader2 className="h-6 w-6 animate-spin" />
        </CardContent>
      </Card>
    );
  }

  if (!status.connected) {
    return (
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Zap className="h-5 w-5" />
              <CardTitle>Terra API - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</CardTitle>
            </div>
            <Badge variant="outline">–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ</Badge>
          </div>
          <CardDescription>
            –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤—Å–µ –Ω–æ—Å–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –æ–¥–Ω—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <p className="text-sm font-medium text-foreground">
              üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:
            </p>
            <div className="grid grid-cols-2 gap-2">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Zap className="h-4 w-4" />
                <span>UltraHuman Ring - –≥–ª—é–∫–æ–∑–∞, –º–µ—Ç–∞–±–æ–ª–∏–∑–º</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Activity className="h-4 w-4" />
                <span>Whoop - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–∞–≥—Ä—É–∑–∫–∞</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Watch className="h-4 w-4" />
                <span>Garmin - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, VO2max</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Heart className="h-4 w-4" />
                <span>Fitbit - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–µ—Ä–¥—Ü–µ</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Activity className="h-4 w-4" />
                <span>Oura - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, —Å–æ–Ω</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Smartphone className="h-4 w-4" />
                <span>Apple Health - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Heart className="h-4 w-4" />
                <span>Withings - –≤–µ—Å, –¥–∞–≤–ª–µ–Ω–∏–µ</span>
              </div>
            </div>
          </div>

          <Button
            onClick={connectTerra}
            disabled={loading}
            className="w-full"
          >
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...
              </>
            ) : (
              <>
                <Zap className="mr-2 h-4 w-4" />
                –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
              </>
            )}
          </Button>

          <div className="pt-4 border-t">
            <p className="text-xs text-muted-foreground">
              üí° –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ webhook
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Zap className="h-5 w-5 text-green-500" />
            <CardTitle>Terra API</CardTitle>
          </div>
          <Badge className="bg-green-500">
            <CheckCircle2 className="h-3 w-3 mr-1" />
            {status.providers.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤
          </Badge>
        </div>
        <CardDescription>
          –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–æ—Å–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
        <div className="space-y-2">
          {status.providers.map((provider) => {
            const Icon = providerIcons[provider.provider] || Activity;
            const isDisconnecting = disconnecting === provider.provider;
            
            return (
              <div 
                key={provider.provider} 
                className="flex items-center justify-between p-3 border rounded-lg bg-muted/50"
              >
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-primary/10 rounded-lg">
                    <Icon className="h-4 w-4 text-primary" />
                  </div>
                  <div>
                    <p className="font-medium text-sm">
                      {providerNames[provider.provider] || provider.provider}
                    </p>
                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                      <span>
                        –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {new Date(provider.connectedAt).toLocaleDateString('ru-RU')}
                      </span>
                      {provider.lastSync && (
                        <>
                          <span>‚Ä¢</span>
                          <span>
                            –°–∏–Ω—Ö: {new Date(provider.lastSync).toLocaleDateString('ru-RU')}
                          </span>
                        </>
                      )}
                    </div>
                  </div>
                </div>
                <Button
                  onClick={() => disconnectProvider(provider.provider)}
                  disabled={isDisconnecting}
                  variant="ghost"
                  size="sm"
                >
                  {isDisconnecting ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <XCircle className="h-4 w-4 text-destructive" />
                  )}
                </Button>
              </div>
            );
          })}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex gap-2 pt-2">
          <Button
            onClick={syncData}
            disabled={syncing}
            variant="outline"
            className="flex-1"
          >
            {syncing ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...
              </>
            ) : (
              <>
                <Calendar className="mr-2 h-4 w-4" />
                –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </>
            )}
          </Button>

          <Button
            onClick={testWebhook}
            disabled={testingWebhook}
            variant="outline"
            size="sm"
          >
            {testingWebhook ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              "üß™ –¢–µ—Å—Ç"
            )}
          </Button>

          <Button
            onClick={connectTerra}
            disabled={loading}
            variant="outline"
            size="sm"
          >
            <Zap className="h-4 w-4" />
          </Button>
        </div>

        <div className="pt-4 border-t">
          <p className="text-xs text-muted-foreground">
            ‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ webhook –æ—Ç Terra API
          </p>
        </div>

        {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ */}
        {showDiagnostics && diagnostics && (
          <div className="pt-4 border-t space-y-3">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-semibold">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ webhook</h3>
              <Badge variant="outline" className="text-xs">
                {new Date(diagnostics.timestamp).toLocaleTimeString('ru-RU')}
              </Badge>
            </div>

            {/* Webhook URL */}
            <Alert className={diagnostics.checks.webhookUrl.status === 'ok' ? 'border-green-500' : 'border-red-500'}>
              <div className="flex items-start gap-2">
                {diagnostics.checks.webhookUrl.status === 'ok' ? (
                  <CheckCircle2 className="h-4 w-4 text-green-500 mt-0.5" />
                ) : (
                  <XCircle className="h-4 w-4 text-red-500 mt-0.5" />
                )}
                <div className="flex-1">
                  <AlertDescription className="text-xs">
                    <strong>Webhook endpoint:</strong> {diagnostics.checks.webhookUrl.message}
                    <div className="mt-1 text-muted-foreground break-all">
                      {diagnostics.checks.webhookUrl.url}
                    </div>
                  </AlertDescription>
                </div>
              </div>
            </Alert>

            {/* Terra Tokens */}
            <Alert className={diagnostics.checks.terraTokens.status === 'ok' ? 'border-green-500' : 'border-red-500'}>
              <div className="flex items-start gap-2">
                {diagnostics.checks.terraTokens.status === 'ok' ? (
                  <CheckCircle2 className="h-4 w-4 text-green-500 mt-0.5" />
                ) : (
                  <XCircle className="h-4 w-4 text-red-500 mt-0.5" />
                )}
                <div className="flex-1">
                  <AlertDescription className="text-xs">
                    <strong>Auth —Å–æ–±—ã—Ç–∏—è:</strong> {diagnostics.checks.terraTokens.message}
                  </AlertDescription>
                </div>
              </div>
            </Alert>

            {/* Data Events */}
            <Alert className="border-blue-500">
              <div className="flex items-start gap-2">
                <AlertCircle className="h-4 w-4 text-blue-500 mt-0.5" />
                <div className="flex-1">
                  <AlertDescription className="text-xs">
                    <strong>–°–æ–±—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö:</strong> {diagnostics.checks.dataEvents.message}
                  </AlertDescription>
                </div>
              </div>
            </Alert>

            {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ */}
            {diagnostics.checks.terraTokens.status === 'fail' && (
              <Alert className="border-orange-500">
                <AlertCircle className="h-4 w-4 text-orange-500" />
                <AlertDescription className="text-xs space-y-2">
                  <strong className="block">–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:</strong>
                  {diagnostics.checks.configuration.steps.map((step: any, idx: number) => (
                    <div key={idx} className="flex items-start gap-2">
                      <span className="text-muted-foreground">{idx + 1}.</span>
                      <div className="flex-1">
                        {step.text}
                        {step.link && (
                          <a 
                            href={step.link} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="ml-2 text-primary hover:underline inline-flex items-center gap-1"
                          >
                            –û—Ç–∫—Ä—ã—Ç—å <ExternalLink className="h-3 w-3" />
                          </a>
                        )}
                        {step.value && (
                          <div className="mt-1 text-muted-foreground font-mono text-xs break-all">
                            {step.value}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </AlertDescription>
              </Alert>
            )}

            <Button
              onClick={() => setShowDiagnostics(false)}
              variant="ghost"
              size="sm"
              className="w-full"
            >
              –°–∫—Ä—ã—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
