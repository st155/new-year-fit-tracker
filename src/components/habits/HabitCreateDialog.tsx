import { useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { supabase } from "@/integrations/supabase/client";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { toast } from "sonner";

interface HabitCreateDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const categories = [
  { value: "fitness", label: "–§–∏—Ç–Ω–µ—Å" },
  { value: "nutrition", label: "–ü–∏—Ç–∞–Ω–∏–µ" },
  { value: "sleep", label: "–°–æ–Ω" },
  { value: "mindfulness", label: "–ú–µ–¥–∏—Ç–∞—Ü–∏—è" },
  { value: "custom", label: "–î—Ä—É–≥–æ–µ" },
];

const frequencies = [
  { value: "daily", label: "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" },
  { value: "weekly", label: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ" },
  { value: "custom", label: "–ö–∞—Å—Ç–æ–º–Ω–æ–µ" },
];

export function HabitCreateDialog({ open, onOpenChange }: HabitCreateDialogProps) {
  const { user } = useAuth();
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [category, setCategory] = useState("custom");
  const [frequency, setFrequency] = useState("daily");
  const [targetCount, setTargetCount] = useState(7);
  const [isCreating, setIsCreating] = useState(false);

  const handleCreate = async () => {
    if (!user || !name.trim()) {
      toast.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏");
      return;
    }

    setIsCreating(true);
    try {
      const { error } = await supabase.from("habits").insert({
        user_id: user.id,
        name: name.trim(),
        description: description.trim() || null,
        category,
        frequency,
        target_count: targetCount,
        is_active: true,
      });

      if (error) throw error;

      toast.success("–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! üéâ");
      onOpenChange(false);
      
      // Reset form
      setName("");
      setDescription("");
      setCategory("custom");
      setFrequency("daily");
      setTargetCount(7);
    } catch (error) {
      console.error("Error creating habit:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏");
    } finally {
      setIsCreating(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</DialogTitle>
          <DialogDescription>
            –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ*</Label>
            <Input
              id="name"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
            <Textarea
              id="description"
              placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–∏–≤—ã—á–∫—É..."
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={3}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
            <Select value={category} onValueChange={setCategory}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {categories.map((cat) => (
                  <SelectItem key={cat.value} value={cat.value}>
                    {cat.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="frequency">–ß–∞—Å—Ç–æ—Ç–∞</Label>
            <Select value={frequency} onValueChange={setFrequency}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {frequencies.map((freq) => (
                  <SelectItem key={freq.value} value={freq.value}>
                    {freq.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {frequency === "weekly" && (
            <div className="space-y-2">
              <Label htmlFor="target">–¶–µ–ª—å (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)</Label>
              <Input
                id="target"
                type="number"
                min={1}
                max={7}
                value={targetCount}
                onChange={(e) => setTargetCount(Number(e.target.value))}
              />
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleCreate} disabled={isCreating || !name.trim()}>
            {isCreating ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
