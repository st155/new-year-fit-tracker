import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/hooks/useAuth";
import { supabase } from "@/integrations/supabase/client";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Trophy, Zap, Target, Activity, ChevronLeft } from "lucide-react";

export function OnboardingTutorial() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [isOpen, setIsOpen] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  useEffect(() => {
    if (!user) return;

    const checkOnboarding = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
      const onboardingKey = `onboarding_completed_${user.id}`;
      const completed = localStorage.getItem(onboardingKey);

      if (!completed) {
        setIsOpen(true);
      }
    };

    checkOnboarding();
  }, [user]);

  const handleNext = () => {
    const nextStep = currentStep + 1;
    
    if (nextStep < steps.length) {
      setCurrentStep(nextStep);
      if (user) {
        localStorage.setItem(`tutorial_step_${user.id}`, String(nextStep));
      }
      
      // Navigate based on step
      if (nextStep === 1) {
        navigate("/goals/create");
      } else if (nextStep === 2) {
        navigate("/challenges");
      } else if (nextStep === 3) {
        navigate("/integrations");
      } else if (nextStep === 4) {
        navigate("/habits");
      }
    } else {
      // Complete onboarding
      setIsOpen(false);
      if (user) {
        localStorage.setItem(`onboarding_completed_${user.id}`, "true");
      }
      navigate("/");
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
      if (user) {
        localStorage.setItem(`tutorial_step_${user.id}`, String(currentStep - 1));
      }
    }
  };

  const handleSkip = () => {
    setIsOpen(false);
    if (user) {
      localStorage.setItem(`onboarding_completed_${user.id}`, "true");
    }
    navigate("/");
  };

  const steps = [
    {
      title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ",
      description: "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –≤–∞—à–∏—Ö —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π.",
      icon: <Trophy className="h-16 w-16 text-primary mx-auto mb-4 animate-bounce" />,
      buttonText: "–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å",
    },
    {
      title: "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ üéØ",
      description: "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏: –≤–µ—Å, –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞, –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è, VO2max –∏ –¥—Ä—É–≥–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.",
      icon: <Target className="h-16 w-16 text-primary mx-auto mb-4" />,
      buttonText: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
    },
    {
      title: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º üèÜ",
      description: "–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ!",
      icon: <Trophy className="h-16 w-16 text-primary mx-auto mb-4" />,
      buttonText: "–°–º–æ—Ç—Ä–µ—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏",
    },
    {
      title: "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üì±",
      description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å Whoop, Apple Health –∏–ª–∏ Withings –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
      icon: <Zap className="h-16 w-16 text-primary mx-auto mb-4" />,
      buttonText: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
    },
    {
      title: "–ù–æ–≤–æ–µ: –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫! ‚ú®",
      description: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏, —Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É. Gamification —Å–∏—Å—Ç–µ–º–∞ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏!",
      icon: <Activity className="h-16 w-16 text-primary mx-auto mb-4" />,
      buttonText: "–ù–∞—á–∞—Ç—å!",
    },
  ];

  const progressPercentage = ((currentStep + 1) / steps.length) * 100;

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <div className="mb-4">
            <div className="flex justify-between text-sm text-muted-foreground mb-2">
              <span>–®–∞–≥ {currentStep + 1} –∏–∑ {steps.length}</span>
              <span>{Math.round(progressPercentage)}%</span>
            </div>
            <Progress value={progressPercentage} className="h-2" />
          </div>
          <DialogTitle className="text-2xl text-center">
            {steps[currentStep].title}
          </DialogTitle>
        </DialogHeader>
        
        <div className="py-6">
          {steps[currentStep].icon}
          <DialogDescription className="text-center text-base">
            {steps[currentStep].description}
          </DialogDescription>
        </div>

        <DialogFooter className="flex-col sm:flex-col gap-2">
          <div className="flex gap-2 w-full">
            {currentStep > 0 && (
              <Button onClick={handlePrevious} variant="outline" className="w-full">
                <ChevronLeft className="mr-2 h-4 w-4" />
                –ù–∞–∑–∞–¥
              </Button>
            )}
            <Button onClick={handleNext} className="w-full">
              {steps[currentStep].buttonText}
            </Button>
          </div>
          <Button onClick={handleSkip} variant="ghost" className="w-full">
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
