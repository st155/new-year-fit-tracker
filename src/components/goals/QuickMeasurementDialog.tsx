import { useState } from "react";
import { ResponsiveDialog } from "@/components/ui/responsive-dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import { PhotoUpload } from "@/components/ui/photo-upload";
import { Camera, Plus } from "lucide-react";

interface Goal {
  id: string;
  goal_name: string;
  goal_type: string;
  target_value: number;
  target_unit: string;
}

interface QuickMeasurementDialogProps {
  goal: Goal;
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  onMeasurementAdded: () => void;
}

export function QuickMeasurementDialog({ 
  goal, 
  isOpen, 
  onOpenChange, 
  onMeasurementAdded 
}: QuickMeasurementDialogProps) {
  const { user } = useAuth();
  const { toast } = useToast();
  
  const [form, setForm] = useState({
    value: '',
    notes: '',
    measurement_date: new Date().toISOString().split('T')[0],
    photo_url: ''
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è MM.SS –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –º–∏–Ω—É—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
  const parseTimeValue = (value: string): number => {
    if (!value) return 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π (—Å–æ–¥–µ—Ä–∂–∏—Ç "–≤—Ä–µ–º—è" –∏–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏)
    const isTimeGoal = goal.target_unit.includes('–º–∏–Ω') || 
                      goal.goal_name.toLowerCase().includes('–≤—Ä–µ–º—è') ||
                      goal.goal_name.toLowerCase().includes('–±–µ–≥') ||
                      goal.goal_name.toLowerCase().includes('–∫–º');
    
    if (isTimeGoal && value.includes('.')) {
      const parts = value.split('.');
      if (parts.length === 2 && parts[1].length <= 2) {
        const minutes = parseInt(parts[0]) || 0;
        const seconds = parseInt(parts[1]) || 0;
        return minutes + (seconds / 60);
      }
    }
    
    return parseFloat(value) || 0;
  };

  const addMeasurement = async () => {
    if (!form.value.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);
    
    try {
      const parsedValue = parseTimeValue(form.value);
      
      const { error } = await supabase
        .from('measurements')
        .insert({
          user_id: user!.id,
          goal_id: goal.id,
          value: parsedValue,
          unit: goal.target_unit,
          measurement_date: form.measurement_date,
          notes: form.notes.trim() || null,
          photo_url: form.photo_url || null
        });

      if (error) throw error;

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: `–ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è "${goal.goal_name}" –¥–æ–±–∞–≤–ª–µ–Ω–æ`,
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setForm({
        value: '',
        notes: '',
        measurement_date: new Date().toISOString().split('T')[0],
        photo_url: ''
      });
      
      onOpenChange(false);
      onMeasurementAdded();
    } catch (error) {
      console.error('Error adding measurement:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const getValuePlaceholder = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π
    const isTimeGoal = goal.target_unit.includes('–º–∏–Ω') || 
                      goal.goal_name.toLowerCase().includes('–≤—Ä–µ–º—è') ||
                      goal.goal_name.toLowerCase().includes('–±–µ–≥') ||
                      goal.goal_name.toLowerCase().includes('–∫–º');
    
    if (isTimeGoal) {
      return "–ù–∞–ø—Ä–∏–º–µ—Ä: 4.40 (4 –º–∏–Ω 40 —Å–µ–∫)";
    }
    
    return `–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ ${goal.target_unit}`;
  };

  return (
    <ResponsiveDialog 
      open={isOpen} 
      onOpenChange={onOpenChange}
      title="–î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ"
      description={`–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Ü–µ–ª–∏: ${goal.goal_name}`}
      snapPoints={[85, 95]}
      className="max-w-[95vw] sm:max-w-md"
    >
        
        <div className="space-y-4 pt-2 pb-4 overflow-y-auto max-h-[60vh]">
          <div>
            <Label htmlFor="quick-value">
              –†–µ–∑—É–ª—å—Ç–∞—Ç ({goal.target_unit})
            </Label>
            <Input
              id="quick-value"
              type="text"
              placeholder={getValuePlaceholder()}
              value={form.value}
              onChange={(e) => setForm(prev => ({ ...prev, value: e.target.value }))}
              className="text-lg"
              autoFocus
            />
            {(goal.target_unit.includes('–º–∏–Ω') || goal.goal_name.toLowerCase().includes('–≤—Ä–µ–º—è')) && (
              <p className="text-xs text-muted-foreground mt-1">
                üí° –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ú–ú.–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.40 = 4 –º–∏–Ω 40 —Å–µ–∫)
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="quick-date">–î–∞—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</Label>
            <Input
              id="quick-date"
              type="date"
              value={form.measurement_date}
              onChange={(e) => setForm(prev => ({ ...prev, measurement_date: e.target.value }))}
            />
          </div>

          <div>
            <Label htmlFor="quick-notes">–ó–∞–º–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
            <Textarea
              id="quick-notes"
              placeholder="–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ..."
              value={form.notes}
              onChange={(e) => setForm(prev => ({ ...prev, notes: e.target.value }))}
              rows={2}
            />
          </div>

          <div>
            <Label className="flex items-center gap-2 mb-2">
              <Camera className="h-4 w-4" />
              –§–æ—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            </Label>
            <PhotoUpload
              onPhotoUploaded={(url) => setForm(prev => ({ ...prev, photo_url: url }))}
              existingPhotoUrl={form.photo_url}
              label="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"
            />
          </div>
        </div>

        <div className="flex gap-2 pt-2 pb-2 border-t bg-background sticky bottom-0">
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            className="flex-1"
            disabled={isSubmitting}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={addMeasurement}
            className="flex-1 bg-gradient-primary hover:opacity-90"
            disabled={isSubmitting || !form.value.trim()}
          >
            {isSubmitting ? "–î–æ–±–∞–≤–ª—è—é..." : "–î–æ–±–∞–≤–∏—Ç—å"}
          </Button>
        </div>
    </ResponsiveDialog>
  );
}