import { useEffect, useRef } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';
import { PageLoader } from '@/components/ui/page-loader';

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö whoop_code –∑–∞–ø–∏—Å–µ–π –∏–∑ sessionStorage
const cleanupOldCodes = () => {
  Object.keys(sessionStorage).forEach(key => {
    if (key.startsWith('whoop_code_')) {
      const timestamp = parseInt(sessionStorage.getItem(key) || '0');
      const hoursAgo = (Date.now() - timestamp) / (1000 * 60 * 60);
      
      // –£–¥–∞–ª–∏—Ç—å –∫–æ–¥—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
      if (hoursAgo > 1) {
        sessionStorage.removeItem(key);
        console.log(`üßπ Removed old whoop_code: ${key}`);
      }
    }
  });
};

export default function WhoopCallback() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const { user } = useAuth();
  const processedRef = useRef(false);

  useEffect(() => {
    // Timeout safety net: redirect after 10 seconds if still waiting for user
    const timeoutId = setTimeout(() => {
      if (!user && !processedRef.current) {
        console.error('‚ùå Timeout: user not loaded after 10 seconds');
        toast({ 
          title: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 
          variant: 'destructive' 
        });
        navigate('/integrations');
      }
    }, 10000);

    const handleCallback = async () => {
      console.log('üîÑ WhoopCallback: useEffect triggered', { 
        hasUser: !!user, 
        userId: user?.id,
        hasCode: !!searchParams.get('code'),
        hasState: !!searchParams.get('state')
      });

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤
      cleanupOldCodes();
      
      if (processedRef.current) {
        console.log('‚úÖ Already processed, skipping');
        return;
      }

      const code = searchParams.get('code');
      const state = searchParams.get('state');
      const error = searchParams.get('error');

      console.log('üìã Callback params:', { 
        hasCode: !!code, 
        hasState: !!state, 
        hasError: !!error 
      });

      if (error) {
        console.error('‚ùå OAuth error:', error);
        toast({ title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Whoop', variant: 'destructive' });
        navigate('/integrations');
        return;
      }

      if (!code || !state) {
        console.warn('‚ö†Ô∏è Missing code or state');
        navigate('/integrations');
        return;
      }

      if (!user) {
        console.log('‚è≥ Waiting for user to load...');
        return; // Exit early, useEffect will re-run when user changes
      }
      
      console.log('‚úÖ User loaded:', user.id);

      if (state !== user.id) {
        console.error('‚ùå State mismatch:', { state, userId: user.id });
        toast({ title: '–û—à–∏–±–∫–∞', description: '–ù–µ–≤–µ—Ä–Ω—ã–π state –ø–∞—Ä–∞–º–µ—Ç—Ä', variant: 'destructive' });
        navigate('/integrations');
        return;
      }

      // Idempotency: prevent re-using the same code on refresh/strict mode
      const usedKey = `whoop_code_${code}`;
      const existingUse = sessionStorage.getItem(usedKey);

      if (existingUse) {
        const timestamp = parseInt(existingUse);
        const minutesAgo = (Date.now() - timestamp) / (1000 * 60);
        
        console.log(`üîç Code already used ${minutesAgo.toFixed(1)} minutes ago`);
        
        // –ï—Å–ª–∏ –∫–æ–¥ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (minutesAgo < 5) {
          console.log('‚ö†Ô∏è Code already used recently, skipping');
          navigate('/integrations');
          return;
        }
        
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
        sessionStorage.removeItem(usedKey);
      }

      sessionStorage.setItem(usedKey, Date.now().toString());
      processedRef.current = true;

      console.log('üöÄ Exchanging authorization code...');

      try {
        const { error: exchangeError } = await supabase.functions.invoke('whoop-integration', {
          body: { action: 'exchange-code', code },
        });

        if (exchangeError) {
          console.error('‚ùå Exchange error:', exchangeError);
          throw exchangeError;
        }

        console.log('‚úÖ Whoop connected successfully');
        toast({ title: 'Whoop –ø–æ–¥–∫–ª—é—á–µ–Ω', description: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ' });
        navigate('/integrations');
      } catch (error: any) {
        console.error('‚ùå Whoop callback error:', error);
        const msg = typeof error?.message === 'string' && error.message.includes('already been used')
          ? '–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—á—Ç–∏ –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.'
          : (error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Whoop');
        toast({ title: '–û—à–∏–±–∫–∞', description: msg, variant: 'destructive' });
        navigate('/integrations');
      }
    };

    handleCallback();

    return () => clearTimeout(timeoutId);
  }, [searchParams, user, navigate, toast]);

  return <PageLoader message="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Whoop..." />;
}
