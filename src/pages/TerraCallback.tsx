import { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle2, XCircle, Loader2, ArrowRight } from 'lucide-react';

type Status = 'processing' | 'success' | 'error';

const PROVIDER_NAMES: Record<string, string> = {
  WHOOP: 'Whoop',
  GARMIN: 'Garmin',
  FITBIT: 'Fitbit',
  OURA: 'Oura Ring',
  WITHINGS: 'Withings',
  POLAR: 'Polar',
  SUUNTO: 'Suunto',
  PELOTON: 'Peloton',
  ULTRAHUMAN: 'Ultrahuman',
};

export default function TerraCallback() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [status, setStatus] = useState<Status>('processing');
  const [message, setMessage] = useState('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

  useEffect(() => {
    const run = async () => {
      const success = searchParams.get('success');
      const statusParam = searchParams.get('status');
      const errorParam = searchParams.get('error') || searchParams.get('message');
      const reference = searchParams.get('reference') || searchParams.get('reference_id');
      const terraUserId = searchParams.get('user') || searchParams.get('user_id') || searchParams.get('terra_user_id');
      
      // Determine provider from URL params or sessionStorage
      let providerParam = searchParams.get('provider') || searchParams.get('source') || searchParams.get('resource');
      
      if (!providerParam) {
        // Try to get from sessionStorage
        providerParam = sessionStorage.getItem('terra_last_provider');
        console.log('üìù Retrieved provider from sessionStorage:', providerParam);
      }
      
      if (!providerParam) {
        console.error('‚ùå No provider detected in URL or sessionStorage');
        setStatus('error');
        setMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ—â–µ —Ä–∞–∑.');
        setTimeout(() => navigate('/integrations'), 3000);
        return;
      }
      
      providerParam = providerParam.toUpperCase();
      console.log('‚úÖ Provider detected:', providerParam);

      console.log('Terra callback:', { success, statusParam, errorParam, reference, terraUserId, providerParam });

      // –ï—Å–ª–∏ Terra –≤–µ—Ä–Ω—É–ª–∞ terra_user_id –ø—Ä—è–º–æ –≤ —Ä–µ–¥–∏—Ä–µ–∫—Ç–µ, —Å–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
      if (terraUserId) {
        try {
          const { supabase } = await import('@/integrations/supabase/client');
          const { data: userRes } = await supabase.auth.getUser();
          const uid = userRes.user?.id;
          if (uid) {
            setStatus('processing');
            setMessage('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');

            const { data: existing } = await supabase
              .from('terra_tokens')
              .select('id')
              .eq('user_id', uid)
              .eq('provider', providerParam)
              .maybeSingle();

            if (existing?.id) {
              await supabase.from('terra_tokens').update({
                terra_user_id: terraUserId,
                is_active: true,
                updated_at: new Date().toISOString(),
              }).eq('id', existing.id);
            } else {
              await supabase.from('terra_tokens').insert({
                user_id: uid,
                terra_user_id: terraUserId,
                provider: providerParam,
                is_active: true,
              });
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            setStatus('success');
            setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
            try {
              const { data, error } = await supabase.functions.invoke('terra-integration', {
                body: { action: 'sync-data' }
              });
              if (error) {
                console.error('Sync error:', error);
                setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.');
              } else {
                console.log('Sync initiated:', data);
                setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
              }
            } catch (e) {
              console.error('Sync error:', e);
              setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.');
            }

            setTimeout(() => navigate('/integrations'), 3000);
            return;
          }
        } catch (e) {
          console.error('Direct bind error:', e);
        }
      }

      // –Ø–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç Terra/–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      if (errorParam) {
        setStatus('error');
        setMessage(decodeURIComponent(errorParam));
        setTimeout(() => navigate('/integrations'), 5000);
        return;
      }

      // –ß–∞—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ Terra Widget
      const widgetSuccess =
        success === 'true' ||
        statusParam === 'success' ||
        searchParams.get('connected') === 'true' ||
        searchParams.get('widget_success') === 'true';

      if (widgetSuccess) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ terra_tokens —Å—Ä–∞–∑—É –∂–µ
        try {
          const { supabase } = await import('@/integrations/supabase/client');
          const { data: userRes } = await supabase.auth.getUser();
          const uid = userRes.user?.id;
          
            if (uid) {
              setStatus('processing');
              setMessage(`–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${PROVIDER_NAMES[providerParam] || providerParam}...`);

              const { data: existing } = await supabase
                .from('terra_tokens')
                .select('id')
                .eq('user_id', uid)
                .eq('provider', providerParam)
                .maybeSingle();

              if (existing?.id) {
                await supabase.from('terra_tokens').update({
                  is_active: true,
                  updated_at: new Date().toISOString(),
                }).eq('id', existing.id);
              } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –±–µ–∑ terra_user_id (–æ–Ω –ø—Ä–∏–¥–µ—Ç –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ webhook)
                await supabase.from('terra_tokens').insert({
                  user_id: uid,
                  provider: providerParam,
                  terra_user_id: null, // Will be filled by webhook
                  is_active: true,
                  last_sync_date: null, // Will be filled after first sync
                });
              }

              setStatus('success');
              setMessage(`${PROVIDER_NAMES[providerParam] || providerParam} –ø–æ–¥–∫–ª—é—á—ë–Ω! –û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Terra...`);

              // Poll for active token for 15 seconds
              let pollAttempts = 0;
              const maxPollAttempts = 15;
              const pollInterval = setInterval(async () => {
                pollAttempts++;
                
                const { data: tokenCheck } = await supabase
                  .from('terra_tokens')
                  .select('terra_user_id')
                  .eq('user_id', uid)
                  .eq('provider', providerParam)
                  .eq('is_active', true)
                  .single();
                
                if (tokenCheck?.terra_user_id || pollAttempts >= maxPollAttempts) {
                  clearInterval(pollInterval);
                  
                  // Clear sessionStorage
                  sessionStorage.removeItem('terra_last_provider');
                  
                  // Redirect after poll completes
                  setTimeout(() => {
                    navigate('/integrations');
                  }, 1000);
                }
              }, 1000);

              return;
            }
          } catch (e) {
            console.error('Error creating terra token:', e);
          }
        
        setStatus('success');
        setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try {
          const { supabase } = await import('@/integrations/supabase/client');
          setMessage('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
          
          const { data, error } = await supabase.functions.invoke('terra-integration', {
            body: { action: 'sync-data' }
          });
          
          if (error) {
            console.error('Sync error:', error);
            setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.');
          } else {
            console.log('Sync initiated:', data);
            setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
          }
        } catch (e) {
          console.error('Sync error:', e);
          setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.');
        }
        
        setTimeout(() => navigate('/integrations'), 3000);
        return;
      }

      // –§–æ–ª–ª–±–µ–∫: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π terra_token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º –ø–æ–ª–ª–∏–Ω–≥–æ–º (–¥–æ 12—Å)
      try {
        setStatus('processing');
        setMessage('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        const { supabase } = await import('@/integrations/supabase/client');
        const { data: userRes } = await supabase.auth.getUser();
        const userId = userRes.user?.id;

        if (userId) {
          const pollForToken = async () => {
            for (let i = 0; i < 12; i++) {
              const { data: tokens, error } = await supabase
                .from('terra_tokens')
                .select('id')
                .eq('user_id', userId)
                .eq('is_active', true)
                .limit(1);

              if (!error && tokens && tokens.length > 0) return true;
              await new Promise((r) => setTimeout(r, 1000));
            }
            return false;
          };

          const tokensReady = await pollForToken();

          if (tokensReady) {
            setStatus('success');
            setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            try {
              setMessage('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
              const { data, error: syncError } = await supabase.functions.invoke('terra-integration', {
                body: { action: 'sync-data' }
              });

              if (syncError) {
                console.error('Sync error:', syncError);
                setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.');
              } else {
                console.log('Sync initiated:', data);
                setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
              }
            } catch (e) {
              console.error('Sync error:', e);
              setMessage('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.');
            }

            setTimeout(() => navigate('/integrations'), 3000);
            return;
          }
        }

        setStatus('error');
        setMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        setTimeout(() => navigate('/integrations'), 5000);
      } catch (e) {
        console.error('Terra callback check error', e);
        setStatus('error');
        setMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        setTimeout(() => navigate('/integrations'), 5000);
      }
    };

    run();
  }, [searchParams, navigate]);

  const getIcon = () => {
    switch (status) {
      case 'processing':
        return <Loader2 className="h-12 w-12 animate-spin text-blue-500" />;
      case 'success':
        return <CheckCircle2 className="h-12 w-12 text-green-500" />;
      case 'error':
        return <XCircle className="h-12 w-12 text-red-500" />;
    }
  };

  const getTitle = () => {
    switch (status) {
      case 'processing':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...';
      case 'success':
        return '–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!';
      case 'error':
        return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <div className="flex flex-col items-center space-y-4">
            {getIcon()}
            <CardTitle className="text-center">{getTitle()}</CardTitle>
            <CardDescription className="text-center">{message}</CardDescription>
          </div>
        </CardHeader>

        <CardContent className="space-y-4">
          {status === 'success' && (
            <Alert className="border-green-500 bg-green-50 dark:bg-green-950/20">
              <CheckCircle2 className="h-4 w-4 text-green-600" />
              <AlertDescription>
                –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤.
              </AlertDescription>
            </Alert>
          )}

          {status === 'error' && (
            <Alert variant="destructive">
              <XCircle className="h-4 w-4" />
              <AlertDescription>
                {message}
              </AlertDescription>
            </Alert>
          )}

          <div className="flex flex-col gap-2">
            {status === 'success' && (
              <Button onClick={() => navigate('/integrations')} className="w-full">
                <ArrowRight className="h-4 w-4 mr-2" />
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º
              </Button>
            )}

            {status === 'error' && (
              <>
                <Button onClick={() => navigate('/integrations')} className="w-full">
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
                <Button
                  variant="outline"
                  onClick={() => navigate('/dashboard')}
                  className="w-full"
                >
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–∞—à–±–æ—Ä–¥
                </Button>
              </>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
