import { supabase } from "@/integrations/supabase/client";
import { DEFAULT_HABIT_TEMPLATES } from "./habit-templates";

export async function migrateExistingHabits(userId: string) {
  try {
    console.log("Starting habit migration for user:", userId);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –±–µ–∑ ai_motivation
    const { data: habits, error: fetchError } = await supabase
      .from("habits")
      .select("*")
      .eq("user_id", userId)
      .or("ai_motivation.is.null,custom_settings.is.null");

    if (fetchError) {
      console.error("Error fetching habits:", fetchError);
      return { success: false, error: fetchError };
    }

    if (!habits || habits.length === 0) {
      console.log("No habits to migrate");
      return { success: true, migrated: 0 };
    }

    console.log(`Found ${habits.length} habits to migrate`);
    let migratedCount = 0;

    for (const habit of habits) {
      let template = null;
      let updates: any = {};

      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      if (habit.name.toLowerCase().includes("–∫—É—Ä–∏—Ç—å") || habit.name.toLowerCase().includes("–∫—É—Ä—è")) {
        template = DEFAULT_HABIT_TEMPLATES.find(t => t.id === "no-smoking");
      } else if (habit.name.toLowerCase().includes("–∞–ª–∫–æ–≥–æ–ª—å") || habit.name.toLowerCase().includes("–ø–∏—Ç—å")) {
        template = DEFAULT_HABIT_TEMPLATES.find(t => t.id === "no-alcohol");
      } else if (habit.name.toLowerCase().includes("fasting") || habit.name.toLowerCase().includes("–≥–æ–ª–æ–¥")) {
        template = DEFAULT_HABIT_TEMPLATES.find(t => t.id === "intermittent-fasting");
      } else if (habit.name.toLowerCase().includes("—Å–∞—Ö–∞—Ä") || habit.name.toLowerCase().includes("—Å–ª–∞–¥–∫")) {
        template = DEFAULT_HABIT_TEMPLATES.find(t => t.id === "no-sugar");
      } else if (habit.name.toLowerCase().includes("—Ñ–∞—Å—Ç—Ñ—É–¥") || habit.name.toLowerCase().includes("fast")) {
        template = DEFAULT_HABIT_TEMPLATES.find(t => t.id === "no-junk-food");
      }

      if (template) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
        updates.ai_motivation = template.ai_motivation;
        updates.icon = template.icon;
        updates.color = template.color;
        
        if (template.custom_settings && !habit.custom_settings) {
          updates.custom_settings = template.custom_settings;
        } else if (template.custom_settings && habit.custom_settings) {
          // –ú–µ—Ä–¥–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          updates.custom_settings = {
            ...(habit.custom_settings as Record<string, any>),
            ...template.custom_settings,
          };
        }
      } else {
        // –ë–∞–∑–æ–≤–∞—è AI –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        if (!habit.ai_motivation) {
          updates.ai_motivation = {
            milestones: {
              1440: "‚ú® 1 –¥–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω! –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ!",
              10080: "üî• –ù–µ–¥–µ–ª—è –ø–æ–∑–∞–¥–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
              43200: "üí™ –¶–µ–ª—ã–π –º–µ—Å—è—Ü! –¢—ã –º–æ–ª–æ–¥–µ—Ü!",
              129600: "üèÜ 3 –º–µ—Å—è—Ü–∞! –≠—Ç–æ —É–∂–µ —Å—Ç–∞–ª–æ –ø—Ä–∏–≤—ã—á–∫–æ–π!",
            },
          };
        }
      }

      if (Object.keys(updates).length > 0) {
        const { error: updateError } = await supabase
          .from("habits")
          .update(updates)
          .eq("id", habit.id);

        if (updateError) {
          console.error(`Error updating habit ${habit.id}:`, updateError);
        } else {
          migratedCount++;
          console.log(`Migrated habit: ${habit.name}`);
        }
      }
    }

    console.log(`Migration complete: ${migratedCount} habits updated`);
    return { success: true, migrated: migratedCount };
  } catch (error) {
    console.error("Migration error:", error);
    return { success: false, error };
  }
}
