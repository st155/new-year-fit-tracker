// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ streak (—Å–µ—Ä–∏–π)

import { differenceInDays, format, parseISO } from 'date-fns';

interface StreakData {
  currentStreak: number;
  longestStreak: number;
  totalDays: number;
  lastActivityDate: string | null;
  streakBroken: boolean;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç streak –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ –¥–∞—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
export const calculateStreak = (activityDates: string[]): StreakData => {
  if (!activityDates || activityDates.length === 0) {
    return {
      currentStreak: 0,
      longestStreak: 0,
      totalDays: 0,
      lastActivityDate: null,
      streakBroken: false
    };
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
  const sortedDates = [...new Set(activityDates)]
    .map(d => format(parseISO(d), 'yyyy-MM-dd'))
    .sort((a, b) => b.localeCompare(a));

  const today = format(new Date(), 'yyyy-MM-dd');
  const lastActivityDate = sortedDates[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ—Ä–≤–∞–ª—Å—è –ª–∏ streak (–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –ø–æ–∑–∂–µ –≤—á–µ—Ä–∞)
  const daysSinceLastActivity = differenceInDays(
    parseISO(today),
    parseISO(lastActivityDate)
  );
  const streakBroken = daysSinceLastActivity > 1;

  let currentStreak = 0;
  let longestStreak = 0;
  let tempStreak = 0;

  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π streak
  if (!streakBroken) {
    for (let i = 0; i < sortedDates.length; i++) {
      const currentDate = sortedDates[i];
      const expectedDate = i === 0 
        ? today 
        : format(parseISO(sortedDates[i - 1]).getTime() - 24 * 60 * 60 * 1000, 'yyyy-MM-dd');
      
      if (i === 0 && currentDate === today) {
        currentStreak = 1;
      } else if (i === 0 && daysSinceLastActivity === 1) {
        currentStreak = 1;
      } else if (currentDate === expectedDate || 
                 differenceInDays(parseISO(sortedDates[i - 1]), parseISO(currentDate)) === 1) {
        currentStreak++;
      } else {
        break;
      }
    }
  }

  // –í—ã—á–∏—Å–ª—è–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π streak
  for (let i = 0; i < sortedDates.length; i++) {
    if (i === 0) {
      tempStreak = 1;
    } else {
      const daysDiff = differenceInDays(
        parseISO(sortedDates[i - 1]),
        parseISO(sortedDates[i])
      );
      
      if (daysDiff === 1) {
        tempStreak++;
      } else {
        longestStreak = Math.max(longestStreak, tempStreak);
        tempStreak = 1;
      }
    }
  }
  longestStreak = Math.max(longestStreak, tempStreak);

  return {
    currentStreak,
    longestStreak,
    totalDays: sortedDates.length,
    lastActivityDate,
    streakBroken
  };
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è streak badge –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å–µ—Ä–∏–∏
 */
export const getStreakColor = (streak: number): string => {
  if (streak === 0) return 'text-muted-foreground';
  if (streak < 7) return 'text-blue-500';
  if (streak < 30) return 'text-green-500';
  if (streak < 100) return 'text-yellow-500';
  return 'text-orange-500';
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è streak
 */
export const getStreakEmoji = (streak: number): string => {
  if (streak === 0) return 'üí§';
  if (streak < 7) return 'üî•';
  if (streak < 30) return '‚ö°';
  if (streak < 100) return 'üåü';
  return 'üëë';
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç streak
 */
export const formatStreakText = (streak: number): string => {
  if (streak === 0) return '–ù–∞—á–Ω–∏—Ç–µ —Å–µ—Ä–∏—é!';
  if (streak === 1) return '1 –¥–µ–Ω—å';
  if (streak < 5) return `${streak} –¥–Ω—è`;
  return `${streak} –¥–Ω–µ–π`;
};
