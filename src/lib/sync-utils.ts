import { supabase } from '@/integrations/supabase/client';

export interface SyncResult {
  provider: string;
  success: boolean;
  error?: string;
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function syncAllSources(userId: string): Promise<SyncResult[]> {
  console.log('üîÑ [syncAllSources] Starting sync for user:', userId);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: tokens, error: tokensError } = await supabase
    .from('terra_tokens')
    .select('provider, is_active')
    .eq('user_id', userId)
    .eq('is_active', true);

  if (tokensError) {
    console.error('‚ùå [syncAllSources] Failed to fetch tokens:', tokensError);
    return [];
  }

  if (!tokens || tokens.length === 0) {
    console.log('‚ö†Ô∏è [syncAllSources] No active tokens found');
    return [];
  }

  console.log(`üì° [syncAllSources] Found ${tokens.length} active sources:`, tokens.map(t => t.provider));

  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  const syncPromises = tokens.map(async (token) => {
    try {
      console.log(`üîÑ [syncAllSources] Syncing ${token.provider}...`);
      
      const { error } = await supabase.functions.invoke('terra-integration', {
        body: { 
          action: 'sync-data',
          provider: token.provider // Pass provider for targeted sync if needed
        }
      });

      if (error) {
        console.error(`‚ùå [syncAllSources] ${token.provider} sync failed:`, error);
        return {
          provider: token.provider,
          success: false,
          error: error.message
        };
      }

      console.log(`‚úÖ [syncAllSources] ${token.provider} sync completed`);
      return {
        provider: token.provider,
        success: true
      };
    } catch (error: any) {
      console.error(`‚ùå [syncAllSources] ${token.provider} sync exception:`, error);
      return {
        provider: token.provider,
        success: false,
        error: error.message
      };
    }
  });

  const results = await Promise.all(syncPromises);
  
  const successCount = results.filter(r => r.success).length;
  const failCount = results.filter(r => !r.success).length;
  
  console.log(`‚úÖ [syncAllSources] Completed: ${successCount} success, ${failCount} failed`);
  
  return results;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
 */
export async function shouldSync(userId: string): Promise<boolean> {
  const { data: metrics } = await supabase
    .from('unified_metrics')
    .select('measurement_date')
    .eq('user_id', userId)
    .order('measurement_date', { ascending: false })
    .limit(1)
    .maybeSingle();

  if (!metrics) {
    console.log('üîÑ [shouldSync] No metrics found, sync needed');
    return true;
  }

  const lastUpdate = new Date(metrics.measurement_date);
  const now = new Date();
  const hoursSinceUpdate = (now.getTime() - lastUpdate.getTime()) / (1000 * 60 * 60);

  const needsSync = hoursSinceUpdate > 24;
  console.log(`üîÑ [shouldSync] Last update: ${hoursSinceUpdate.toFixed(1)}h ago, needs sync: ${needsSync}`);
  
  return needsSync;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ localStorage
 */
export function getLastSyncTime(): Date | null {
  const timestamp = localStorage.getItem('last_sync_time');
  return timestamp ? new Date(parseInt(timestamp)) : null;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ localStorage
 */
export function setLastSyncTime(date: Date = new Date()): void {
  localStorage.setItem('last_sync_time', date.getTime().toString());
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (–Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 15 –º–∏–Ω—É—Ç)
 */
export function canSync(): boolean {
  const lastSync = getLastSyncTime();
  if (!lastSync) return true;

  const now = new Date();
  const minutesSinceSync = (now.getTime() - lastSync.getTime()) / (1000 * 60);
  
  const canSyncNow = minutesSinceSync >= 15;
  console.log(`üîÑ [canSync] Last sync: ${minutesSinceSync.toFixed(1)}m ago, can sync: ${canSyncNow}`);
  
  return canSyncNow;
}
