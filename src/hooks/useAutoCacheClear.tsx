import { useEffect } from 'react';
import { useQueryClient } from '@tanstack/react-query';

const CACHE_CLEAR_KEY = 'last_cache_clear';
const CACHE_CLEAR_INTERVAL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

export function useAutoCacheClear() {
  const queryClient = useQueryClient();

  useEffect(() => {
    const checkAndClearCache = () => {
      try {
        const lastClear = localStorage.getItem(CACHE_CLEAR_KEY);
        const now = Date.now();

        // –ï—Å–ª–∏ –∫–µ—à –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —á–∏—Å—Ç–∏–ª—Å—è –∏–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
        if (!lastClear || now - parseInt(lastClear) > CACHE_CLEAR_INTERVAL) {
          console.log('üßπ Auto-clearing caches (24h interval)');
          
          // –û—á–∏—Å—Ç–∫–∞ localStorage –∫–µ—à–µ–π
          const keysToRemove = [
            'fitness_metrics_cache',
            'fitness_data_cache_whoop',
            'fitness_data_cache',
            'metrics_view_mode',
            'metrics_device_filter'
          ];
          
          keysToRemove.forEach(key => {
            localStorage.removeItem(key);
          });
          
          // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
          Object.keys(localStorage).forEach(key => {
            if (key.includes('whoop') || 
                key.includes('fitness') || 
                key.startsWith('progress_cache_')) {
              localStorage.removeItem(key);
            }
          });
          
          // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è React Query –∫–µ—à–µ–π
          queryClient.invalidateQueries({ queryKey: ['metric_values'] });
          queryClient.invalidateQueries({ queryKey: ['unified-metrics'] });
          queryClient.invalidateQueries({ queryKey: ['widgets'] });
          queryClient.invalidateQueries({ queryKey: ['dashboard-metrics'] });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π timestamp
          localStorage.setItem(CACHE_CLEAR_KEY, now.toString());
          
          console.log('‚úÖ Auto-cache clear completed');
        } else {
          const hoursUntilNext = Math.ceil((CACHE_CLEAR_INTERVAL - (now - parseInt(lastClear))) / (1000 * 60 * 60));
          console.log(`‚è±Ô∏è Next auto-cache clear in ${hoursUntilNext} hours`);
        }
      } catch (error) {
        console.error('Auto-cache clear error:', error);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    checkAndClearCache();
  }, [queryClient]);
}
