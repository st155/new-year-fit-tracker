import { useState, useEffect, useCallback } from 'react';
import { syncAllSources, shouldSync, canSync, setLastSyncTime } from '@/lib/sync-utils';
import { useToast } from '@/hooks/use-toast';

/**
 * Hook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
 * - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 15 –º–∏–Ω—É—Ç)
 * - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export function useAutoSync(userId: string | undefined) {
  const [isSyncing, setIsSyncing] = useState(false);
  const { toast } = useToast();

  // Auto-sync –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  useEffect(() => {
    if (!userId) return;

    const checkAndSync = async () => {
      console.log('üîÑ [useAutoSync] Checking if sync needed...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (!canSync()) {
        console.log('‚è≠Ô∏è [useAutoSync] Skipping auto-sync (too recent)');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 24—á)
      const needsSync = await shouldSync(userId);
      if (!needsSync) {
        console.log('‚úÖ [useAutoSync] Data is fresh, no sync needed');
        return;
      }

      console.log('üöÄ [useAutoSync] Auto-syncing stale data...');
      setIsSyncing(true);

      try {
        const results = await syncAllSources(userId);
        setLastSyncTime();

        const successCount = results.filter(r => r.success).length;
        const failCount = results.filter(r => !r.success).length;

        if (successCount > 0) {
          toast({
            title: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            description: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${successCount}${failCount > 0 ? ` (${failCount} –æ—à–∏–±–æ–∫)` : ''}`,
          });
        }

        if (failCount > 0 && successCount === 0) {
          toast({
            title: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
            description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.',
            variant: 'destructive',
          });
        }
      } catch (error) {
        console.error('‚ùå [useAutoSync] Auto-sync failed:', error);
      } finally {
        setIsSyncing(false);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –º–µ—à–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ)
    const timeoutId = setTimeout(checkAndSync, 2000);

    return () => clearTimeout(timeoutId);
  }, [userId, toast]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å")
  const syncAllData = useCallback(async () => {
    if (!userId || isSyncing) return;

    console.log('üîÑ [useAutoSync] Manual sync triggered');
    setIsSyncing(true);

    try {
      const results = await syncAllSources(userId);
      setLastSyncTime();

      const successCount = results.filter(r => r.success).length;
      const failCount = results.filter(r => !r.success).length;

      if (successCount > 0) {
        toast({
          title: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
          description: `–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${successCount}${failCount > 0 ? ` (${failCount} –æ—à–∏–±–æ–∫)` : ''}`,
        });
      }

      if (failCount > 0) {
        const failedProviders = results
          .filter(r => !r.success)
          .map(r => r.provider)
          .join(', ');
        
        toast({
          title: successCount > 0 ? '–ß–∞—Å—Ç–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' : '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
          description: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: ${failedProviders}`,
          variant: successCount > 0 ? 'default' : 'destructive',
        });
      }

      if (successCount === 0 && failCount === 0) {
        toast({
          title: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
          description: '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
        });
      }
    } catch (error: any) {
      console.error('‚ùå [useAutoSync] Manual sync failed:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
        variant: 'destructive',
      });
    } finally {
      setIsSyncing(false);
    }
  }, [userId, isSyncing, toast]);

  return {
    isSyncing,
    syncAllData,
  };
}
